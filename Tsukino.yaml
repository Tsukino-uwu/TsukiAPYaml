#    ⠀⠀⠀⠀⠀⠀⢠⣿⣶⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣦⣄⣀⡀⣠⣾⡇⠀⠀⠀⠀
# ⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀
# ⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⢿⣿⣿⡇⠀⠀⠀⠀
# ⠀⣶⣿⣦⣜⣿⣿⣿⡟⠻⣿⣿⣿⣿⣿⣿⣿⡿⢿⡏⣴⣺⣦⣙⣿⣷⣄⠀⠀⠀
# ⠀⣯⡇⣻⣿⣿⣿⣿⣷⣾⣿⣬⣥⣭⣽⣿⣿⣧⣼⡇⣯⣇⣹⣿⣿⣿⣿⣧
# Used to describe your yaml. Useful if you have multiple files,
description: Default Tsukino Template, with lot of comments explaining how weight, plando, triggers and everything else works
 # Explanations are mostly done the first time something new appears in the yaml.
 # so if something is missing #comments or an explanation its
 # probly somewhere further up and already explained

# Advanced Trigger settings/options can be found at the bottom of the yaml,
# can be used to for example change the player/slot name depending on what game gets picked.
# these are simply some convenient on/off toggles for them
# true=on,false=off
randomize_game_selection: false # game gacha, if false picks games from "game:" instead

supported_games_only: false # if false, picks all unsupported & supported games
 #This will force randomized game selection to be true

async: false # if true, this will only change game settings, not pick specific async games
 # Otherwise known as "long seed", usually just more tasks/bosses and total checks
 
per_game_name: true # if false, defaults to standard player/slot name Tsukino


game: # This is only used if games selection is not randomized
   # Weight Guide
    #
    # Few examples:
    # if you weight games LTTP:20/Terraria:10/PokemonRB:20, for instance,
    # there will be 40% chance of LTTP, 20% chance of Terraria and 40% chance of pokemon.
    # LTTP = 20/(20+10+20) = 20/50 = 40%
    # Terraria = 10/(20+10+20) = 10/50 = 20%
    # Pokemon = 20/(20+10+20) = 20/50 = 40%
    # # Several weights can be used for like this
    # if you want to randomize a bit between which option gets picked
    # if you change pokemon's weight to 15, then the spread becomes 44.4%, 22.2% and 33.3%
    # weights are summed, and each unit of chance is 1/(weight sum)
    # 33 + 33 + 33 + 33 = 132, 33/132 = 0.25 = 1 in 4 chance
    # there's no need to worry about total weight being exactly 100 or more/less
    # weights of 1, 1, and 1 are the same as weights of 33, 33 and 33
    # tl;dr weight/total weight
    #
    # any value at 1 or above can be used to enable something, 0=off/disabled
    # its possible to mix/enable multiple unsupported/supported games
    # just #commented this way for easier categorizing
    # also shows the latest tested/updated yaml versions
  
  #Unsupported games
     Pseudoregalia: 0 # 0.4.6
     
  #Supported games
     Pokemon Emerald: 1 # 0.4.6
   
requires: #Version of Archipelago required for this yaml to work as expected.
  version: 0.4.6
  #Latest tested and updated version of game yamls

  plando: items # plando_options in host.yaml                                         <--- THIS IS PROBLY THE !!!!
  # https://archipelago.gg/tutorial/Archipelago/plando/en#enabling-plando             <--- @@@@@ ERROR! @@@@!!!!
  #^this will throw an error if not enabled, disabled by default
  #
  # Some useful links~
  #
  # AP Launcher:
  # https://github.com/ArchipelagoMW/Archipelago
  #
  # Item Tracker:
  # https://github.com/black-sliver/PopTracker/
  #
  # Supported game item/location list:
  # https://archipelago.gg/datapackage
  #
  # supported/unsupported games list & info about apworld updates, lot of links for tracker/setup etc as well
  # https://multiworld.news/
  #
  # Archipelago Games Sheet, List of playable/unsupported games & links to apworld files etc
  # https://docs.google.com/spreadsheets/d/1HZvn4wSjb633Uxu2o8oHambwP0aAax4XnADidn3xs3g/edit#gid=58422002

Pseudoregalia: #Lunatic/hard settings
  # guide: https://github.com/pseudoregalia-modding/pseudoregalia-archipelago
  # poptracker: https://github.com/Br00ty/pseudoregalia_brooty
  
  progression_balancing:
    # A system that can move progression earlier, to try and prevent the player from getting stuck and bored early.
    # A lower setting means more getting stuck. A higher setting means less getting stuck.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 99
    # tl;dr low=hard, high=easy
    #
    # Weights:
    # can also be used for a couple other settings/options in yaml's
    # to further randomize things instead of just having something 
    # set specifically to true, false or random
    # basically randomize a bit between which option/s can get picked
    #
    # 50 is the commonly used default value for enable/true etc even if anything 1+ works
    random: 0
    random-low: 0
    random-high: 0
    disabled: 0 # equivalent to 0
    random-range-10-50: 0 # random value between 10-50
    random-range-50-99: 50 # random value between 50-99
    10: 0 # equivalent to 10
    30: 0 # equivalent to 30
    normal: 0 # equivalent to 50
    extreme: 0 # equivalent to 99

  accessibility:
    # Set rules for reachability of your items/locations.
    # Locations: ensure everything can be reached and acquired.
    # Items: ensure all logically relevant items can be acquired.
    # Minimal: ensure what is needed to reach your goal can be acquired.
    locations: 0
    items: 50
    minimal: 0

  local_items:
    # Forces these items to be in their native world.
    #
    # A comma has to be used after every "itemname" unless its the last item in the list
    # else a new item/line won't get recognized
    #
    # if something is #commented, it will be ignored/skipped without having to remove it
    [ 
    # "Major Key - Empty Bailey",
    # "Major Key - The Underbelly",
    # "Major Key - Tower Remains",
    # "Major Key - Sansa Keep",
    # "Major Key - Twilight Theatre"
    ]

  non_local_items:
    # Forces these items to be outside their native world.
    #
    # - itemname can also be used, if you want to avoid using commas/exclamation marks
    # Imo less room for errors as its not possible to miss/forget commas anywhere 
    # also looks clean & is simpler to edit
    - Health Piece
    - Aerial Finesse
    - Pilgrimage
    - Empathy
    - Martial Prowess
    - Clear Mind
    - Professionalism
    - Good Graces

  start_inventory:
    # Start with these items.
    {}
    
  Start_Inventory_from_Pool:
    # Start with these items and don't place them in the world.
    # The game decides what the replacement items will be.
    {}

  start_hints:
    # Start with these item's locations prefilled into the !hint command.
    []

  start_location_hints:
    # Start with these locations and their item prefilled into the !hint command
    []

  exclude_locations:
    # Prevent these locations from having an important item
    []

  priority_locations:
    # Prevent these locations from having an unimportant item
    []
    
  item_links:
    # Share part of your item pool with other players.
    []

  logic_level:
    # The overall difficulty of the logic, used to determine the requirements to access locations and regions.
    # 
    # Normal: Suitable for anyone who has beaten the game. Requires backflips and knowing where everything is.
    # Hard: Requires some easier movement tricks such as cling climbing, and more nuanced movement like turning during an air kick.
    # Expert: Requires more difficult movement tricks such as ultrahops and reverse wallkicks, and obscure knowledge.
    # Lunatic: Requires extremely difficult jumps and creative thinking. No holds barred. You have been warned.
    # 
    # Currently applies to Castle, Dungeon, Library, Keep, and Underbelly.
    normal: 0
    hard: 0
    expert: 0
    lunatic: 50

  obscure_logic:
    # Enables logic for obscure knowledge and creative pathing that isn't difficult to execute but may not be obvious or commonly known.
    # This option is forced on if logic level is set to Expert or Lunatic.
    # 
    # Currently applies to Castle, Dungeon, Library, Keep, and Underbelly.
    false: 0
    true: 50

  progressive_breaker:
    # Replaces Dream Breaker, Strikebreak, and Soul Cutter with three Progressive Dream Breaker items.
    false: 0
    true: 50

  progressive_slide:
    # Replaces Slide and Solar Wind with two Progressive Slide items.
    false: 0
    true: 50

  split_sun_greaves:
    # Replaces Sun Greaves and Heliacal Power with four individual Air Kicks.
    false: 0
    true: 50

  death_link:
    # When you die, everyone dies. Of course the reverse is true too.
    false: 0
    true: 50
    
  plando_items:
    #Item plando allows a player to place an item in a specific location or specific locations,
    #or place multiple items into a list of specific locations both in their own game or in another player's game.
    #
    # Single Placement is when you use a plando block to place a single item at a single location.
    # "item" is the item you would like to place and location is the location to place it.
    # 
    # example:
    # - item:
    # Progressive Slide: 1  
    # location: early_locations
    # from_pool: true
    # world: true
    # percentage: 20
    #
    # Multi Placement uses a plando block to place multiple items in multiple locations until either list is exhausted.
    # "items" defines the items to use, each with a number for the amount. Using true instead of a number uses however many of that item are in your item pool.
    #
    # example:
    # - items:
    # Boss Relic: 3
    # locations:
    # - Boss Relic 1
    # - Boss Relic 2
    # - Boss Relic 3
    #
    
    - item:
      #https://archipelago.gg/datapackage, item/location list for supported games
      #Case sensitive item name: amount
        Air Kick: 1
        
      #early_locations will add all sphere 1 locations (locations logically reachable only with your starting inventory)
      #non_early_locations will add all locations beyond sphere 1 (locations that require finding at least one item before they become logically reachable)
      #can also use case sensitive game locations like "Ganons Tower - Compass Room - Top Right" etc
      location: early_locations
      
      #determines if the item should be taken from the item pool or added to it. This can be true or false and defaults to true if omitted.
      from_pool: true
      
      #world settings
      #If a number is used, it targets that slot or player number in the multiworld.
      #If a name is used, it will target the world with that player name.
      #If set to true, it will be any player's world besides your own.
      #If set to false, it will target your own world.
      #If set to null, it will target a random world in the multiworld.
      #If a list of names is used, it will target the games with the player names specified.
      world: true
      
      #the percentage chance for the relevant block to trigger. This can be any value from 0 to 100 and if omitted will default to 100.
      percentage: 100
      
      # determines whether the generator will fail if the item can't be placed in the location. 
      # 
      # If set to true, the item must be placed and the generator will throw an error if it is unable to do so.
      # If set to false, the generator will log a warning if the placement can't be done but will still generate.
      # If set to silent and the placement fails, it will be ignored entirely.
      force: true
      
    - item:
        Progressive Slide: 1 #don't forget indents like this, or you will get errors
      location: early_locations
      from_pool: true
      world: true
      percentage: 33
      force: true
      
    - items:
        Health Piece: 16
      location: non_early_locations
      from_pool: true
      world: true
      percentage: 66
      force: silent # Just in case, so it can't break/error due to running out of spots
      
      # "count:" can be used to set the maximum number of items placed from the block. The default is 1 if using item and False if using items
      # If a number is used, it will try to place this number of items.
      # If set to false, it will try to place as many items from the block as it can.
      # If min and max are defined, it will try to place a number of items between these two numbers at random.
      #Example:
      count:
        min: 1
        max: 16
        
      # place some of the major keys in early locations
    - items:
        Major Key - Empty Bailey: 1
        Major Key - The Underbelly: 1
        Major Key - Tower Remains: 1
        Major Key - Sansa Keep: 1
        Major Key - Twilight Theatre: 1
      location: early_locations
      from_pool: true
      world: true
      percentage: 100
      force: silent
      count:
        min: 1
        max: 3
      
Pokemon Emerald: #Champion 20%scaling casual ish
  # guide: https://archipelago.gg/tutorial/Pokemon%20Emerald/setup/en
  # poptracker: https://github.com/AliceMousie/emerald-ap-tracker

  progression_balancing:
    normal: 50

  accessibility:
    locations: 0
    items: 50
    minimal: 0

  local_items:
    []

  non_local_items:
    []

  start_inventory:
    #In pkmn emerald items will appear in your pc/box storage, not in your inventory when first starting the game

    Max Repel: 198 # 99x2 stacks
    Rare Candy: 99 # 99x1 stacks, nice for repel to work
    Poke Ball: 1 # if struggling with rival at the start
    #for a somewhat pre sorted inventory at the top
    Full Heal: 2
    Full Restore: 2
    Revive: 2
    X Special: 2
    X Attack: 2
    X Defend: 2
    Escape Rope: 2
    Harbor Mail: 1 # less backtracking

  start_hints:
    []

  start_location_hints:
    []

  exclude_locations:
    # So much work getting to this one compared to the other gyms
    - Sootopolis Gym - Rain Badge
    - Sootopolis Gym - TM03 from Juan
    # 2nd half of Trick house
    - Trick House Puzzle 5 - Reward
    - Trick House Puzzle 6 - Item
    - Trick House Puzzle 6 - Reward
    - Trick House Puzzle 7 - Item
    - Trick House Puzzle 7 - Reward
    - Trick House Puzzle 8 - Item
    # All Safari zone items
    - Safari Zone N - Item in Grass
    - Safari Zone NW - Item Behind Pond
    - Safari Zone NE - Item on Ledge
    - Safari Zone SW - Item Behind Pond
    - Safari Zone SE - Item in Grass
    # Battle frontier, pretty out of the way spots
    - Artisan Cave 1F - Item
    - Artisan Cave B1F - Hidden Item 1
    - Artisan Cave B1F - Hidden Item 2
    - Artisan Cave B1F - Hidden Item 3
    - Artisan Cave B1F - Hidden Item 4
    - Artisan Cave B1F - Item
    # annoying/slow
    - Fortree City - Wingull Delivery Reward # backtracking
    - Route 109 - Seashore House Reward # need to fight 3 trainers
    - Route 111 - Winstrate Family Reward # need to fight the whole family, 5 trainers?

  priority_locations:
    # 2x important rewards for each of the early gyms
    - Rustboro Gym - Stone Badge
    - Rustboro Gym - TM39 from Roxanne
    - Dewford Gym - Knuckle Badge
    - Dewford Gym - TM08 from Brawly
    - Mauville Gym - Dynamo Badge
    - Mauville Gym - TM34 from Wattson
    - Lavaridge Gym - Heat Badge
    - Lavaridge Gym - TM50 from Flannery

  item_links:
    []

  goal:
    # Determines what your goal is to consider the game beaten
    # 
    # Champion: Become the champion and enter the hall of fame
    # Steven: Defeat Steven in Meteor Falls
    # Norman: Defeat Norman in Petalburg Gym
    # Legendary Hunt: Defeat or catch legendary pokemon (or whatever was randomized into their encounters)
    champion: 50
    steven: 0
    norman: 0
    legendary_hunt: 0

  badges:
    # Adds Badges to the pool
    # 
    # Vanilla: Gym leaders give their own badge
    # Shuffle: Gym leaders give a random badge
    # Completely Random: Badges can be found anywhere
    vanilla: 0
    shuffle: 0
    completely_random: 50

  hms:
    # Adds HMs to the pool
    # 
    # Vanilla: HMs are at their vanilla locations
    # Shuffle: HMs are shuffled among vanilla HM locations
    # Completely Random: HMs can be found anywhere
    vanilla: 0
    shuffle: 0
    completely_random: 50

  key_items:
    # Adds most key items to the pool. These are usually required to unlock
    # a location or region (e.g. Devon Scope, Letter, Basement Key)
    false: 0
    true: 50

  bikes:
    # Adds the mach bike and acro bike to the pool
    false: 0
    true: 50

  event_tickets:
    # Adds the event tickets to the pool, which let you access legendaries by sailing from Lilycove
    false: 50
    true: 0

  rods:
    # Adds fishing rods to the pool
    false: 0
    true: 50

  overworld_items:
    # Adds items on the ground with a Pokeball sprite to the pool
    false: 0
    true: 50

  hidden_items:
    # Adds hidden items to the pool
    false: 50
    true: 0

  npc_gifts:
    # Adds most gifts received from NPCs to the pool (not including key items or HMs)
    false: 0
    true: 50

  berry_trees:
    # Adds berry trees to the pool. Empty soil patches are converted to locations and contribute Sitrus Berries to the pool.
    false: 50
    true: 0

  dexsanity:
    # Adding a "caught" pokedex entry gives you an item (catching, evolving, trading, etc.).
    # 
    # Defeating gym leaders provides dex info, allowing you to see where on the map you can catch species you need.
    # 
    # Each pokedex entry adds a Poke Ball, Great Ball, or Ultra Ball to the pool.
    false: 50
    true: 0

  trainersanity:
    # Defeating a trainer for the first time gives you an item. Trainers are no longer missable.
    # 
    # Trainers no longer give you money for winning. Each trainer adds a valuable item (nugget, stardust, etc.) to the pool.
    false: 50
    true: 0

  item_pool_type:
    # Determines which non-progression items get put into the item pool
    # 
    # Shuffled: Item pool consists of shuffled vanilla items
    # Diverse Balanced: Item pool consists of random items approximately proportioned
    # according to what they're replacing (i.e. more pokeballs, fewer X items, etc.)
    # Diverse: Item pool consists of uniformly random (non-unique) items
    shuffled: 0
    diverse_balanced: 0
    diverse: 50

  require_itemfinder:
    # The Itemfinder is logically required to pick up hidden items
    false: 0
    true: 50

  require_flash:
    # Determines whether HM05 Flash is logically required to navigate a dark cave
    neither: 0
    only_granite_cave: 0
    only_victory_road: 0
    both: 50

  elite_four_requirement:
    # Sets the requirements to challenge the elite four
    # 
    # Badges: Obtain some number of badges
    # Gyms: Defeat some number of gyms
    badges: 50
    gyms: 0

  elite_four_count:
    # Sets the number of badges/gyms required to challenge the elite four
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 8
    8: 50
    random: 0
    random-low: 0
    random-high: 0

  norman_requirement:
    # Sets the requirements to challenge the Petalburg Gym
    # 
    # Badges: Obtain some number of badges
    # Gyms: Defeat some number of gyms
    badges: 50
    gyms: 0

  norman_count:
    # Sets the number of badges/gyms required to challenge the Petalburg Gym
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 7
    7: 50
    random-range-5-7: 0
    random: 0
    random-low: 0
    random-high: 0

  legendary_hunt_catch:
    # Sets whether legendaries need to be caught to satisfy the Legendary Hunt win condition. Defeated legendaries can be respawned by defeating the Elite 4.
    false: 50
    true: 0

  legendary_hunt_count:
    # Sets the number of legendaries that must be caught/defeated for the Legendary Hunt goal
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 12
    3: 50
    random: 0
    random-low: 0
    random-high: 0
    random-range-2-11: 0

  allowed_legendary_hunt_encounters:
    # Sets which legendary encounters can contribute to the Legendary Hunt goal.
    # 
    # Latios will always be the roamer. Latias will always be at Southern Island.
    # 
    # Possible values are:
    # "Groudon"
    # "Kyogre"
    # "Rayquaza"
    # "Latios"
    # "Latias"
    # "Regirock"
    # "Registeel"
    # "Regice"
    # "Ho-Oh"
    # "Lugia"
    # "Deoxys"
    # "Mew"
    
    ['Rayquaza', 'Ho-Oh', 'Latios', 'Regirock', 'Registeel', 'Lugia', 'Kyogre', 'Mew', 'Latias', 'Groudon', 'Regice', 'Deoxys']
    #its possible to have things sideways like this, but its a bit more work to edit compared to just doing
    #- Rayquaza 
    #- Ho-Oh
    #- Latios
    #etc

  wild_pokemon:
    # Randomizes wild pokemon encounters (grass, caves, water, fishing)
    # 
    # Vanilla: Wild encounters are unchanged
    # Match Base Stats: Wild pokemon are replaced with species with approximately the same bst
    # Match Type: Wild pokemon are replaced with species that share a type with the original
    # Match Base Stats and Type: Apply both Match Base Stats and Match Type
    # Completely Random: There are no restrictions
    vanilla: 0
    match_base_stats: 0
    match_type: 0
    match_base_stats_and_type: 0
    completely_random: 50

  wild_encounter_blacklist:
    # Prevents listed species from appearing in the wild when wild encounters are randomized.
    # 
    # May be overridden if enforcing other restrictions in combination with this blacklist is impossible.
    # 
    # Use "_Legendaries" as a shortcut for legendary pokemon.
    []

  starters:
    # Randomizes the starter pokemon in Professor Birch's bag
    # 
    # Vanilla: Starters are unchanged
    # Match Base Stats: Starters are replaced with species with approximately the same bst
    # Match Type: Starters are replaced with species that share a type with the original
    # Match Base Stats and Type: Apply both Match Base Stats and Match Type
    # Completely Random: There are no restrictions
    vanilla: 0
    match_base_stats: 0
    match_type: 0
    match_base_stats_and_type: 0
    completely_random: 50

  starter_blacklist:
    # Prevents listed species from appearing as starters when starters are randomized.
    # 
    # May be overridden if enforcing other restrictions in combination with this blacklist is impossible.
    # 
    # Use "_Legendaries" as a shortcut for legendary pokemon.
    []

  trainer_parties:
    # Randomizes the parties of all trainers.
    # 
    # Vanilla: Parties are unchanged
    # Match Base Stats: Trainer pokemon are replaced with species with approximately the same bst
    # Match Type: Trainer pokemon are replaced with species that share a type with the original
    # Match Base Stats and Type: Apply both Match Base Stats and Match Type
    # Completely Random: There are no restrictions
    vanilla: 0
    match_base_stats: 0
    match_type: 50
    match_base_stats_and_type: 0
    completely_random: 0

  trainer_party_blacklist:
    # Prevents listed species from appearing in opponent trainers' parties if opponent parties are randomized.
    # 
    # May be overridden if enforcing other restrictions in combination with this blacklist is impossible.
    # 
    # Use "_Legendaries" as a shortcut for legendary pokemon.
    []

  force_fully_evolved:
    # When an opponent uses a pokemon of the specified level or higher, restricts the species to only fully evolved pokemon.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 100
    random-range-40-60: 50
    100: 0
    random: 0
    random-low: 0
    random-high: 0

  legendary_encounters:
    # Randomizes legendary encounters (Rayquaza, Regice, Latias, etc.). The roamer will always be Latios during legendary hunts.
    # 
    # Vanilla: Legendary encounters are unchanged
    # Shuffle: Legendary encounters are shuffled between each other
    # Match Base Stats: Legendary encounters are replaced with species with approximately the same bst
    # Match Type: Legendary encounters are replaced with species that share a type with the original
    # Match Base Stats and Type: Apply both Match Base Stats and Match Type
    # Completely Random: There are no restrictions
    vanilla: 0
    shuffle: 0
    match_base_stats: 0
    match_type: 0
    match_base_stats_and_type: 0
    completely_random: 50

  misc_pokemon:
    # Randomizes non-legendary static encounters. May grow to include other pokemon like trades or gifts.
    # 
    # Vanilla: Species are unchanged
    # Shuffle: Species are shuffled between each other
    # Match Base Stats: Species are replaced with species with approximately the same bst
    # Match Type: Species are replaced with species that share a type with the original
    # Match Base Stats and Type: Apply both Match Base Stats and Match Type
    # Completely Random: There are no restrictions
    vanilla: 0
    shuffle: 0
    match_base_stats: 0
    match_type: 0
    match_base_stats_and_type: 0
    completely_random: 50

  types:
    # Randomizes the type(s) of every pokemon. Each species will have the same number of types.
    # 
    # Vanilla: Types are unchanged
    # Shuffle: Types are shuffled globally for all species (e.g. every Water-type pokemon becomes Fire-type)
    # Completely Random: Each species has its type(s) randomized
    # Follow Evolutions: Types are randomized per evolution line instead of per species
    vanilla: 50
    shuffle: 0
    completely_random: 0
    follow_evolutions: 0

  abilities:
    # Randomizes abilities of every species. Each species will have the same number of abilities.
    # 
    # Vanilla: Abilities are unchanged
    # Completely Random: Each species has its abilities randomized
    # Follow Evolutions: Abilities are randomized, but if a pokemon would normally retain its ability
    # when evolving, the random ability will also be retained
    vanilla: 0
    completely_random: 0
    follow_evolutions: 50

  ability_blacklist:
    # A list of abilities which no pokemon should have if abilities are randomized.
    # For example, you could exclude Wonder Guard and Arena Trap like this:
    # ["Wonder Guard", "Arena Trap", "Shadow Tag", "Magnet Pull", "Truant", "Cacophony"]
    - Wonder Guard
    - Arena Trap
    - Shadow Tag
    - Magnet Pull
    - Truant
    - Cacophony

  level_up_moves:
    # Randomizes the moves a pokemon learns when they reach a level where they would learn a move.
    # Your starter is guaranteed to have a usable damaging move.
    # 
    # Vanilla: Learnset is unchanged
    # Randomized: Moves are randomized
    # Start with Four Moves: Moves are randomized and all Pokemon know 4 moves at level 1
    vanilla: 0
    randomized: 50
    start_with_four_moves: 0

  move_match_type_bias:
    # Sets the probability that a learned move will be forced match one of the types of a pokemon.
    # 
    # If a move is not forced to match type, it will roll for Normal type bias.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    33: 50
    random: 0
    random-low: 0
    random-high: 0

  move_normal_type_bias:
    # After it has been decided that a move will not be forced to match types, sets the probability that a learned move
    # will be forced to be the Normal type.
    # 
    # If a move is not forced to be Normal, it will be completely random.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    5: 50
    random: 0
    random-low: 0
    random-high: 0

  tm_tutor_compatibility:
    # Sets the percent chance that a given TM or move tutor is compatible with a species
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    100: 50
    random: 0
    random-low: 0
    random-high: 0
    vanilla: 0 # equivalent to -1

  hm_compatibility:
    # Sets the percent chance that a given HM is compatible with a species
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 50
    # Maximum value is 100
    100: 50
    random: 0
    random-low: 0
    random-high: 0
    vanilla: 0 # equivalent to -1

  tm_tutor_moves:
    # Randomizes the moves taught by TMs and move tutors
    false: 50
    true: 0

  reusable_tms_tutors:
    # Sets TMs to not break after use (they remain sellable). Sets move tutors to infinite use.
    false: 0
    true: 50
    
  move_blacklist:
    # A list of moves which should be excluded from learnsets, TMs, and move tutors.
    - Minimize
    - Double Team
    - Protect
    - Substitute
    - Detect
    - Sand-Attack
    - Smokescreen

  min_catch_rate:
    # Sets the minimum catch rate a pokemon can have. Any pokemon with a catch rate below this floor will have it raised to this value.
    # 
    # Legendaries are often in the single digits
    # Fully evolved pokemon are often double digits
    # Pidgey is 255
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 3
    # Maximum value is 255
    255: 50
    3: 0
    random: 0
    random-low: 0
    random-high: 0

  guaranteed_catch:
    # Every throw is guaranteed to catch a wild pokemon
    false: 0
    true: 50

  normalize_encounter_rates:
    # Make every slot on an encounter table approximately equally likely.
    # 
    # This does NOT mean every species is equally likely. But it will make rarer encounters less rare overall.
    false: 0
    true: 50

  exp_modifier:
    # Multiplies gained experience by a percentage
    # 
    # 100 is default
    # 50 is half
    # 200 is double
    # etc.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 1000
    300: 0
    100: 0
    random-range-300-600: 50
    random: 0
    random-low: 0
    random-high: 0

  blind_trainers:
    # Causes trainers to not start a battle with you unless you talk to them
    false: 0
    true: 50

  purge_spinners:
    # Trainers will rotate in predictable patterns on a set interval instead of randomly and don't turn toward you when you run
    false: 50
    true:  0
    random: 0

  match_trainer_levels:
    # When you start a battle with a trainer, your party's levels will be automatically set to match that trainer's highest level pokemon.
    # 
    # The experience you receive will match your party's average actual level, and will only be awarded when you win the battle.
    # 
    # This is a pseudo-replacement for a level cap and makes every trainer battle a fair fight while still allowing you to level up.
    # 
    # Off: The vanilla experience
    # Additive: The modifier you apply to your team is a flat bonus
    # Multiplicative: The modifier you apply to your team is a percent bonus
    off: 0
    additive: 0
    multiplicative: 50

  match_trainer_levels_bonus:
    # A level bonus (or penalty) to apply to your team when matching an opponent's levels.
    # 
    # When the match trainer levels option is "additive", this value is added to your team's levels during a battle.
    # For example, if this value is 5 (+5 levels), you'll have a level 25 team against a level 20 team, and a level 45 team against a level 40 team.
    # 
    # When the match trainer levels option is "multiplicative", this is a percent bonus.
    # For example, if this value is 5 (+5%), you'll have a level 21 team against a level 20 team, and a level 42 team against a level 40 team.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is -100
    # Maximum value is 100
    0: 0
    20: 50 # 1+ at lvl 5, 4-6+ at lvl 20-30, 10-12+ at lvl 50-60
    random: 0
    random-low: 0
    random-high: 0

  double_battle_chance:
    # The percent chance that a trainer with more than 1 pokemon will be converted into a double battle.
    # If these trainers would normally approach you, they will only do so if you have 2 unfainted pokemon.
    # They can be battled by talking to them no matter what.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    0: 0
    100: 50
    random-range-0-10: 0
    random: 0
    random-low: 0
    random-high: 0

  better_shops:
    # Pokemarts sell every item that can be obtained in a pokemart (except mail, which is still unique to the relevant city)
    false: 0
    true: 50

  remove_roadblocks:
    # Removes specific NPCs that normally stand in your way until certain events are completed.
    # 
    # This can open up the world a bit and make your playthrough less linear,
    # but careful how many you remove, it may make too much of your world accessible upon receiving Surf.
    # 
    # Possible values are:
    # "Route 110 Aqua Grunts"
    # "Route 112 Magma Grunts"
    # "Route 119 Aqua Grunts"
    # "Safari Zone Construction Workers"
    # "Lilycove City Wailmer"
    # "Aqua Hideout Grunts"
    # "Seafloor Cavern Aqua Grunt"
    #
    - Route 110 Aqua Grunts
    - Seafloor Cavern Aqua Grunt

  extra_boulders:
    # Places strength boulders on Route 115 which block access to Meteor Falls from the beach.
    # This aims to take some power away from Surf by restricting how much it allows you to access.
    false: 0
    true: 5
    random: 1

  extra_bumpy_slope:
    # Adds a bumpy slope to Route 115 which allows access to Meteor Falls if you have the Acro Bike.
    # This aims to take some power away from Surf by adding a new way to exit the Rustboro area.
    false: 0
    true: 5
    random: 1

  modify_118:
    # Changes the layout of Route 118 so that it must be crossed with the Acro Bike instead of Surf.
    # This aims to take some power away from Surf by restricting how much it allows you to access.
    false: 0
    true: 5
    random: 1

  free_fly_location:
    # Enables flying to one random location when Mom gives you the running shoes (excluding cities reachable with no items)
    false: 0
    true: 50

  hm_requirements:
    # Sets the requirements to use HMs outside of battle
    vanilla: 0
    fly_without_badge: 50

  turbo_a:
    # Holding A will advance most text automatically
    false: 0
    true: 50

  receive_item_messages:
    # Determines whether you receive an in-game notification when receiving an item. Items can still only be received in the overworld.
    # 
    # All: Every item shows a message
    # Progression: Only progression items show a message
    # None: All items are added to your bag silently (badges will still show)
    all: 0
    progression: 50
    none: 0

  remote_items:
    # Instead of placing your own items directly into the ROM, all items are received from the server, including items you find for yourself.
    # 
    # This enables co-op of a single slot and recovering more items after a lost save file (if you're so unlucky).
    # But it changes pickup behavior slightly and requires connection to the server to receive any items.
    false: 0
    true: 50

  music:
    # Shuffles music played in any situation where it loops. Includes many FRLG tracks.
    false: 50
    true: 0
    random: 0

  fanfares:
    # Shuffles fanfares for item pickups, healing at the pokecenter, etc.
    # 
    # When this option is enabled, pressing B will interrupt most fanfares.
    false: 50
    true: 0

  death_link:
    false: 0
    true: 0
    random: 50

  enable_wonder_trading:
    # Allows participation in wonder trading with other players in your current multiworld. Speak with the center receptionist on the second floor of any pokecenter.
    # 
    # Wonder trading NEVER affects logic.
    # 
    # Certain aspects of a pokemon species are per-game, not per-pokemon.
    # As a result, some things are not retained during a trade, including type, ability, level up learnset, and so on.
    # Receiving a pokemon this way does not mark it as found in your pokedex.
    # Trade evolutions do not evolve this way; they retain their modified methods (level ups and item use).
    false: 0
    true: 50

  easter_egg:
    # Enter certain phrases and something special might happen.
    # 
    # All secret phrases are something that could be a trendy phrase in Dewford Town. They are case insensitive.
    EMERALD SECRET: 50
    
  plando_items:
    - item:
        HM02 Fly: 1
      location: early_locations
      from_pool: true
      world: true
      percentage: 100
      force: true
    - item:
        Letter: 1
      location: Rusturf Tunnel - Item West
      from_pool: true
      world: false # placed in local world, due to local location.
      percentage: 100
      force: true
    - item:
        Devon Goods: 1
      location: Granite Cave 1F - TM47 from Steven # when you deliver the letter
      from_pool: true
      world: false # placed in local world, due to local location.
      percentage: 33
      force: true

triggers:
  # Triggers allow you to customize your game options by allowing you to define one or many options which only occur under specific conditions. 
  # These are essentially "if, then" statements for options in your game and yaml.
  
  # Trigger activation priority order goes from top to bottom in what happens first
  # so make sure to place them in order by what you want to happen first to last
  # Its not possible to trigger trigger results
  # for example: 
  #
  # If trigger1 wants to pick a player name depending on what game "game:" picks
  # then afterwards trigger2 change what game "game:" will pick
  # this will makes it so trigger1 picks a name from a game, and afterwards that game gets changed by trigger2
  # and result in trigger1 having another games intended player name instead of the correct one.
  #
  # tl;dr trigger1 picks an option, trigger2 can ignore/overwrite previous trigger results if they conflict or change same/similar things,
  # as it will change things after trigger1 already did its thing
  #
  # Avoid using triggers for settings/options that have already been triggered/changed 
  # unless you want the trigger to ignore/overwrite previous results
  # triggers can trigger other triggers if the order of them is right
  #
  #
  # EASY SEARCH:
  #
  # You can search for where specific triggers start by looking for 
  #
  # optionname: starts here @@@@@@@@@@@@@@@@@
  #
  # to have an easier time to know where the main function of something actually start/stop code wise
  # but they might be affected earlier/later on in other triggers if required
  #
  
  - option_category: null # 
     # option_category specifies the section which the triggering option is defined in.
     # 
     # Example: A Link to the Past
     # This is the category the option is located in. If the option you're triggering off of is in root then you would use null,
     # otherwise this is the game for which you want this option trigger to activate. 
     
    # randomize_game_selection: starts here @@@@@@@@@@@@@@@@@
    #
    # supported_games_only is just here 
    # as it has to trigger and force randomize_game_selection 
    # to be true first to not overwrite things later on
    option_name: supported_games_only
    option_result: true
    options:
      null:
        randomize_game_selection: true
        # If randomized_game_selection is false
        # it decides the game from "game:" without using triggers
        # manually at the top of the yaml
        # there is no need for a false trigger option here, 
        # as randomize_game_selection will always be true, when supported_games_only is true
        
  - option_name: randomize_game_selection
    option_result: true
    options:
      null:
        # supported and unsupported games / All games here
        #
        # this will get ignored/overwritten if
        # supported_games_only is true,
        # if supported_games_only is false it just acts
        # as a way to randomize all games here in the trigger
        # instead of in "game:" at the top of the yaml
        #
        # weight can be used to randomize what games get picked
        game:
          Pseudoregalia: 1
          Pokemon Emerald: 1
          
    # supported_games_only: starts here @@@@@@@@@@@@@@@@@
  - option_name: supported_games_only
    # option_name specifies the name of the triggering option.
    #
    # Example: shop_item_slots
    # This can be any option from any category defined in the YAML file in either root or a game section.
    
    option_result: true
    # option_result specifies the value of the option that activates this trigger.
    # 
    # Example: 15
    # Each trigger must be used for exactly one option result.
    # If you would like the same thing to occur with multiple results, you would need multiple triggers for this.

    options:
      null:
      #supported game list / Only supported games here
        game:
          # weight can be used to randomize what games get picked
          Pokemon Emerald: 1 
          
    # async: starts here @@@@@@@@@@@@@@@@@  
    #    
    # Game defaults should be for SYNC. Triggers will set ASYNC options.    
  - option_name: async
    option_result: true
    options:
        null:
          # This will overwrite/ignore all of the default/sync settings in this yaml, and only use these specific ones
          # anything left blank/unchanged will use the games default template default values
          Pokemon Emerald: 
              wild_pokemon:
                completely_random: 50
                  #Vanilla wild pokemon locations give an error when dexsanity is used
              dexsanity: true
              trainersanity: true
              goal: steven
              start_inventory:
                Max Repel: 99 # 1stack for convenience
              bikes:
                true: 50
              rods:
                true: 50
              require_itemfinder:
                true: 50
              hidden_items: # No clue where all of these are even with item finder, but its a lot of checks
                true: 50
              npc_gifts:
                true: 50
              berry_trees:
                true: 50
              starters:
                completely_random: 50
              trainer_parties:
                completely_random: 50
              force_fully_evolved:
                random-range-40-60: 50
              legendary_encounters:
                completely_random: 50
              misc_pokemon:
                completely_random: 50
              abilities:
                follow_evolutions: 50
              ability_blacklist: ["Wonder Guard", "Arena Trap", "Shadow Tag", "Magnet Pull", "Truant", "Cacophony",]
              move_blacklist: ["Minimize", "Double Team", "Protect", "Substitute", "Detect", "Sand-Attack", "Smokescreen",]
              level_up_moves:
                start_with_four_moves: 50
              tm_tutor_compatibility:
                100: 50
              hm_compatibility:
                100: 50
              reusable_tms_tutors:
                true: 50
              guaranteed_catch:
                true: 50
              normalize_encounter_rates:
                true: 50
              exp_modifier:
                300: 50
              blind_trainers:
                true: 50
              better_shops:
                true: 50
              extra_boulders:
                true: 50
              extra_bumpy_slope:
                true: 50
              modify_118:
                true: 50
              turbo_a:
                true: 50
              receive_item_messages:
                progression: 50
              remote_items:
                true: 50
              exclude_locations: ["Pokedex - Shedinja",] #just in case
              
          #Pseudoregalia:
              #-

    # per_game_name: starts here @@@@@@@@@@@@@@@@@
    #
    # has to trigger at the bottom/last,
    # so it won't get the name to early / game changes after name is picked and becomes incorrect etc
  - option_name: game
    # per_game_name
    # Picks a player/slot name depending on what game "game:" decides
    #
    # Spaces will be replaced with underscores and there is a 16-character limit for player/slot names.
    # {NUMBER} can be used to avoid duplicate name errors, but only possible if 15 or less characters are used

    option_result: Pseudoregalia
    
    options:
      null:
        name: Tsukiregalia{NUMBER} #12

  - option_name: game
    option_result: Pokemon Emerald
    options:
      null:
        name: TsukiPkmnEmerald{NUMBER} #16

  - option_name: per_game_name
    option_result: false
    options:
      null:
        name: Tsukino{NUMBER} #Default name if per game name is set to off/false